#!/usr/bin/expect -f

set timeout 30
set host "10.123.42.225"
set user "pi"
set password "raspberry"

# Connect to the Pi
spawn ssh -o StrictHostKeyChecking=no $user@$host

expect {
    "password:" {
        send "$password\r"
        exp_continue
    }
    "pi@raspberrypi-custom:" {
        # We're connected!
        send "echo 'SSH Connection Successful!'\r"
        expect "SSH Connection Successful!"
        
        send "whoami && hostname && uptime\r"
        expect -re ".*"
        
        send "echo 'Checking services...'\r"
        expect "Checking services..."
        
        send "systemctl list-units --type=service --state=running | grep -E '(airplay|google-cast|remote-control|ssh)'\r"
        expect -re ".*"
        
        send "echo 'Checking custom GUI...'\r"
        expect "Checking custom GUI..."
        
        send "ps aux | grep raspberry-pi-gui | grep -v grep\r"
        expect -re ".*"
        
        send "echo 'Installing missing packages...'\r"
        expect "Installing missing packages..."
        
        send "sudo apt update\r"
        expect -re ".*"
        
        send "sudo apt install -y python3-pip python3-tk python3-psutil shairport-sync avahi-daemon samba nginx\r"
        expect -re ".*"
        
        send "pip3 install flask flask-cors requests psutil\r"
        expect -re ".*"
        
        send "echo 'Creating custom GUI script...'\r"
        expect "Creating custom GUI script..."
        
        send "sudo mkdir -p /usr/local/bin\r"
        expect -re ".*"
        
        send "cat > /tmp/raspberry-pi-gui.py << 'EOF'\r"
        expect "> "
        send "#!/usr/bin/env python3\r"
        expect "> "
        send "import tkinter as tk\r"
        expect "> "
        send "import psutil\r"
        expect "> "
        send "import subprocess\r"
        expect "> "
        send "import threading\r"
        expect "> "
        send "import time\r"
        expect "> "
        send "\r"
        expect "> "
        send "class RaspberryPiGUI:\r"
        expect "> "
        send "    def __init__(self):\r"
        expect "> "
        send "        self.root = tk.Tk()\r"
        expect "> "
        send "        self.root.title('Raspberry Pi Custom OS')\r"
        expect "> "
        send "        self.root.geometry('800x600')\r"
        expect "> "
        send "        self.root.configure(bg='#2c3e50')\r"
        expect "> "
        send "        self.setup_ui()\r"
        expect "> "
        send "        self.update_stats()\r"
        expect "> "
        send "\r"
        expect "> "
        send "    def setup_ui(self):\r"
        expect "> "
        send "        # Title\r"
        expect "> "
        send "        title = tk.Label(self.root, text='🍓 Raspberry Pi Custom OS', font=('Arial', 24, 'bold'), fg='white', bg='#2c3e50')\r"
        expect "> "
        send "        title.pack(pady=20)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        # Status frame\r"
        expect "> "
        send "        status_frame = tk.Frame(self.root, bg='#34495e', relief='raised', bd=2)\r"
        expect "> "
        send "        status_frame.pack(pady=10, padx=20, fill='x')\r"
        expect "> "
        send "\r"
        expect "> "
        send "        # CPU and Memory\r"
        expect "> "
        send "        self.cpu_label = tk.Label(status_frame, text='CPU: Loading...', font=('Arial', 14), fg='white', bg='#34495e')\r"
        expect "> "
        send "        self.cpu_label.pack(pady=5)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        self.memory_label = tk.Label(status_frame, text='Memory: Loading...', font=('Arial', 14), fg='white', bg='#34495e')\r"
        expect "> "
        send "        self.memory_label.pack(pady=5)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        # Services frame\r"
        expect "> "
        send "        services_frame = tk.Frame(self.root, bg='#34495e', relief='raised', bd=2)\r"
        expect "> "
        send "        services_frame.pack(pady=10, padx=20, fill='x')\r"
        expect "> "
        send "\r"
        expect "> "
        send "        services_title = tk.Label(services_frame, text='Services Status', font=('Arial', 16, 'bold'), fg='white', bg='#34495e')\r"
        expect "> "
        send "        services_title.pack(pady=10)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        self.airplay_label = tk.Label(services_frame, text='AirPlay: Checking...', font=('Arial', 12), fg='white', bg='#34495e')\r"
        expect "> "
        send "        self.airplay_label.pack(pady=2)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        self.cast_label = tk.Label(services_frame, text='Google Cast: Checking...', font=('Arial', 12), fg='white', bg='#34495e')\r"
        expect "> "
        send "        self.cast_label.pack(pady=2)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        self.web_label = tk.Label(services_frame, text='Web Dashboard: Checking...', font=('Arial', 12), fg='white', bg='#34495e')\r"
        expect "> "
        send "        self.web_label.pack(pady=2)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        # Control buttons\r"
        expect "> "
        send "        button_frame = tk.Frame(self.root, bg='#2c3e50')\r"
        expect "> "
        send "        button_frame.pack(pady=20)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        start_btn = tk.Button(button_frame, text='Start All Services', command=self.start_services, font=('Arial', 12), bg='#27ae60', fg='white')\r"
        expect "> "
        send "        start_btn.pack(side='left', padx=10)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        stop_btn = tk.Button(button_frame, text='Stop All Services', command=self.stop_services, font=('Arial', 12), bg='#e74c3c', fg='white')\r"
        expect "> "
        send "        stop_btn.pack(side='left', padx=10)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        refresh_btn = tk.Button(button_frame, text='Refresh Status', command=self.update_stats, font=('Arial', 12), bg='#3498db', fg='white')\r"
        expect "> "
        send "        refresh_btn.pack(side='left', padx=10)\r"
        expect "> "
        send "\r"
        expect "> "
        send "    def start_services(self):\r"
        expect "> "
        send "        subprocess.run(['sudo', 'systemctl', 'start', 'airplay.service'], check=False)\r"
        expect "> "
        send "        subprocess.run(['sudo', 'systemctl', 'start', 'google-cast.service'], check=False)\r"
        expect "> "
        send "        subprocess.run(['sudo', 'systemctl', 'start', 'remote-control.service'], check=False)\r"
        expect "> "
        send "        self.update_stats()\r"
        expect "> "
        send "\r"
        expect "> "
        send "    def stop_services(self):\r"
        expect "> "
        send "        subprocess.run(['sudo', 'systemctl', 'stop', 'airplay.service'], check=False)\r"
        expect "> "
        send "        subprocess.run(['sudo', 'systemctl', 'stop', 'google-cast.service'], check=False)\r"
        expect "> "
        send "        subprocess.run(['sudo', 'systemctl', 'stop', 'remote-control.service'], check=False)\r"
        expect "> "
        send "        self.update_stats()\r"
        expect "> "
        expect "> "
        send "\r"
        expect "> "
        send "    def update_stats(self):\r"
        expect "> "
        send "        # Update CPU and Memory\r"
        expect "> "
        send "        cpu_percent = psutil.cpu_percent(interval=1)\r"
        expect "> "
        send "        memory = psutil.virtual_memory()\r"
        expect "> "
        send "        self.cpu_label.config(text=f'CPU: {cpu_percent}%')\r"
        expect "> "
        send "        self.memory_label.config(text=f'Memory: {memory.percent}%')\r"
        expect "> "
        send "\r"
        expect "> "
        send "        # Check services\r"
        expect "> "
        send "        airplay_status = subprocess.run(['systemctl', 'is-active', 'airplay.service'], capture_output=True, text=True)\r"
        expect "> "
        send "        cast_status = subprocess.run(['systemctl', 'is-active', 'google-cast.service'], capture_output=True, text=True)\r"
        expect "> "
        send "        web_status = subprocess.run(['systemctl', 'is-active', 'remote-control.service'], capture_output=True, text=True)\r"
        expect "> "
        send "\r"
        expect "> "
        send "        self.airplay_label.config(text=f'AirPlay: {airplay_status.stdout.strip()}')\r"
        expect "> "
        send "        self.cast_label.config(text=f'Google Cast: {cast_status.stdout.strip()}')\r"
        expect "> "
        send "        self.web_label.config(text=f'Web Dashboard: {web_status.stdout.strip()}')\r"
        expect "> "
        send "\r"
        expect "> "
        send "        # Schedule next update\r"
        expect "> "
        send "        self.root.after(5000, self.update_stats)\r"
        expect "> "
        send "\r"
        expect "> "
        send "    def run(self):\r"
        expect "> "
        send "        self.root.mainloop()\r"
        expect "> "
        send "\r"
        expect "> "
        send "if __name__ == '__main__':\r"
        expect "> "
        send "    app = RaspberryPiGUI()\r"
        expect "> "
        send "    app.run()\r"
        expect "> "
        send "EOF\r"
        expect -re ".*"
        
        send "sudo cp /tmp/raspberry-pi-gui.py /usr/local/bin/\r"
        expect -re ".*"
        
        send "sudo chmod +x /usr/local/bin/raspberry-pi-gui.py\r"
        expect -re ".*"
        
        send "echo 'Creating systemd services...'\r"
        expect "Creating systemd services..."
        
        send "sudo tee /etc/systemd/system/airplay.service > /dev/null << 'EOF'\r"
        expect "> "
        send "[Unit]\r"
        expect "> "
        send "Description=AirPlay Receiver\r"
        expect "> "
        send "After=network.target\r"
        expect "> "
        send "\r"
        expect "> "
        send "[Service]\r"
        expect "> "
        send "Type=simple\r"
        expect "> "
        send "ExecStart=/usr/bin/shairport-sync\r"
        expect "> "
        send "Restart=always\r"
        expect "> "
        send "User=pi\r"
        expect "> "
        send "\r"
        expect "> "
        send "[Install]\r"
        expect "> "
        send "WantedBy=multi-user.target\r"
        expect "> "
        send "EOF\r"
        expect -re ".*"
        
        send "sudo tee /etc/systemd/system/google-cast.service > /dev/null << 'EOF'\r"
        expect "> "
        send "[Unit]\r"
        expect "> "
        send "Description=Google Cast Receiver\r"
        expect "> "
        send "After=network.target\r"
        expect "> "
        send "\r"
        expect "> "
        send "[Service]\r"
        expect "> "
        send "Type=simple\r"
        expect "> "
        send "ExecStart=/usr/bin/python3 -m http.server 8008\r"
        expect "> "
        send "WorkingDirectory=/home/pi\r"
        expect "> "
        send "Restart=always\r"
        expect "> "
        send "User=pi\r"
        expect "> "
        send "\r"
        expect "> "
        send "[Install]\r"
        expect "> "
        send "WantedBy=multi-user.target\r"
        expect "> "
        send "EOF\r"
        expect -re ".*"
        
        send "sudo tee /etc/systemd/system/remote-control.service > /dev/null << 'EOF'\r"
        expect "> "
        send "[Unit]\r"
        expect "> "
        send "Description=Remote Control Web Server\r"
        expect "> "
        send "After=network.target\r"
        expect "> "
        send "\r"
        expect "> "
        send "[Service]\r"
        expect "> "
        send "Type=simple\r"
        expect "> "
        send "ExecStart=/usr/bin/python3 /usr/local/bin/remote-control-server\r"
        expect "> "
        send "Restart=always\r"
        expect "> "
        send "User=pi\r"
        expect "> "
        send "\r"
        expect "> "
        send "[Install]\r"
        expect "> "
        send "WantedBy=multi-user.target\r"
        expect "> "
        send "EOF\r"
        expect -re ".*"
        
        send "echo 'Creating remote control server...'\r"
        expect "Creating remote control server..."
        
        send "sudo tee /usr/local/bin/remote-control-server > /dev/null << 'EOF'\r"
        expect "> "
        send "#!/usr/bin/env python3\r"
        expect "> "
        send "from flask import Flask, jsonify, render_template_string\r"
        expect "> "
        send "import psutil\r"
        expect "> "
        send "import socket\r"
        expect "> "
        send "\r"
        expect "> "
        send "app = Flask(__name__)\r"
        expect "> "
        send "\r"
        expect "> "
        send "@app.route('/')\r"
        expect "> "
        send "def dashboard():\r"
        expect "> "
        send "    return render_template_string('''\r"
        expect "> "
        send "<!DOCTYPE html>\r"
        expect "> "
        send "<html>\r"
        expect "> "
        send "<head>\r"
        expect "> "
        send "    <title>Raspberry Pi Dashboard</title>\r"
        expect "> "
        send "    <style>\r"
        expect "> "
        send "        body { font-family: Arial; background: #2c3e50; color: white; padding: 20px; }\r"
        expect "> "
        send "        .card { background: #34495e; padding: 20px; margin: 10px; border-radius: 10px; }\r"
        expect "> "
        send "        h1 { text-align: center; }\r"
        expect "> "
        send "        .status { color: #27ae60; }\r"
        expect "> "
        send "        .error { color: #e74c3c; }\r"
        expect "> "
        send "    </style>\r"
        expect "> "
        send "</head>\r"
        expect "> "
        send "<body>\r"
        expect "> "
        send "    <h1>🍓 Raspberry Pi Custom OS Dashboard</h1>\r"
        expect "> "
        send "    <div class=\"card\">\r"
        expect "> "
        send "        <h2>System Status</h2>\r"
        expect "> "
        send "        <p>CPU: <span id=\"cpu\">Loading...</span></p>\r"
        expect "> "
        send "        <p>Memory: <span id=\"memory\">Loading...</span></p>\r"
        expect "> "
        send "        <p>Disk: <span id=\"disk\">Loading...</span></p>\r"
        expect "> "
        send "    </div>\r"
        expect "> "
        send "    <div class=\"card\">\r"
        expect "> "
        send "        <h2>Services</h2>\r"
        expect "> "
        send "        <p>AirPlay: <span id=\"airplay\">Checking...</span></p>\r"
        expect "> "
        send "        <p>Google Cast: <span id=\"cast\">Checking...</span></p>\r"
        expect "> "
        send "        <p>Web Dashboard: <span id=\"web\">Checking...</span></p>\r"
        expect "> "
        send "    </div>\r"
        expect "> "
        send "    <script>\r"
        expect "> "
        send "        setInterval(() => {\r"
        expect "> "
        send "            fetch('/api/status')\r"
        expect "> "
        send "                .then(r => r.json())\r"
        expect "> "
        send "                .then(d => {\r"
        expect "> "
        send "                    document.getElementById('cpu').textContent = d.cpu + '%';\r"
        expect "> "
        send "                    document.getElementById('memory').textContent = d.memory + '%';\r"
        expect "> "
        send "                    document.getElementById('disk').textContent = d.disk + '%';\r"
        expect "> "
        send "                    document.getElementById('airplay').textContent = d.airplay;\r"
        expect "> "
        send "                    document.getElementById('cast').textContent = d.cast;\r"
        expect "> "
        send "                    document.getElementById('web').textContent = d.web;\r"
        expect "> "
        send "                });\r"
        expect "> "
        send "        }, 2000);\r"
        expect "> "
        send "    </script>\r"
        expect "> "
        send "</body>\r"
        expect "> "
        send "</html>\r"
        expect "> "
        send "''')\r"
        expect "> "
        send "\r"
        expect "> "
        send "@app.route('/api/status')\r"
        expect "> "
        send "def status():\r"
        expect "> "
        send "    import subprocess\r"
        expect "> "
        send "    airplay_status = subprocess.run(['systemctl', 'is-active', 'airplay.service'], capture_output=True, text=True)\r"
        expect "> "
        send "    cast_status = subprocess.run(['systemctl', 'is-active', 'google-cast.service'], capture_output=True, text=True)\r"
        expect "> "
        send "    web_status = subprocess.run(['systemctl', 'is-active', 'remote-control.service'], capture_output=True, text=True)\r"
        expect "> "
        send "    \r"
        expect "> "
        send "    return jsonify({\r"
        expect "> "
        send "        'cpu': psutil.cpu_percent(),\r"
        expect "> "
        send "        'memory': psutil.virtual_memory().percent,\r"
        expect "> "
        send "        'disk': psutil.disk_usage('/').percent,\r"
        expect "> "
        send "        'airplay': airplay_status.stdout.strip(),\r"
        expect "> "
        send "        'cast': cast_status.stdout.strip(),\r"
        expect "> "
        send "        'web': web_status.stdout.strip()\r"
        expect "> "
        send "    })\r"
        expect "> "
        send "\r"
        expect "> "
        send "if __name__ == '__main__':\r"
        expect "> "
        send "    app.run(host='0.0.0.0', port=8080)\r"
        expect "> "
        send "EOF\r"
        expect -re ".*"
        
        send "sudo chmod +x /usr/local/bin/remote-control-server\r"
        expect -re ".*"
        
        send "echo 'Enabling and starting services...'\r"
        expect "Enabling and starting services..."
        
        send "sudo systemctl daemon-reload\r"
        expect -re ".*"
        
        send "sudo systemctl enable airplay.service\r"
        expect -re ".*"
        
        send "sudo systemctl enable google-cast.service\r"
        expect -re ".*"
        
        send "sudo systemctl enable remote-control.service\r"
        expect -re ".*"
        
        send "sudo systemctl start airplay.service\r"
        expect -re ".*"
        
        send "sudo systemctl start google-cast.service\r"
        expect -re ".*"
        
        send "sudo systemctl start remote-control.service\r"
        expect -re ".*"
        
        send "echo 'Checking service status...'\r"
        expect "Checking service status..."
        
        send "sudo systemctl status airplay.service --no-pager\r"
        expect -re ".*"
        
        send "sudo systemctl status google-cast.service --no-pager\r"
        expect -re ".*"
        
        send "sudo systemctl status remote-control.service --no-pager\r"
        expect -re ".*"
        
        send "echo 'Testing web dashboard...'\r"
        expect "Testing web dashboard..."
        
        send "curl -s http://localhost:8080 | head -5\r"
        expect -re ".*"
        
        send "echo 'Setting up auto-start GUI...'\r"
        expect "Setting up auto-start GUI..."
        
        send "mkdir -p /home/pi/.config/autostart\r"
        expect -re ".*"
        
        send "cat > /home/pi/.config/autostart/custom-gui.desktop << 'EOF'\r"
        expect "> "
        send "[Desktop Entry]\r"
        expect "> "
        send "Type=Application\r"
        expect "> "
        send "Name=Custom GUI\r"
        expect "> "
        send "Exec=python3 /usr/local/bin/raspberry-pi-gui.py\r"
        expect "> "
        send "Hidden=false\r"
        expect "> "
        send "NoDisplay=false\r"
        expect "> "
        send "X-GNOME-Autostart-enabled=true\r"
        expect "> "
        send "EOF\r"
        expect -re ".*"
        
        send "echo 'All services configured and started!'\r"
        expect "All services configured and started!"
        
        send "echo 'Web Dashboard: http://10.123.42.225:8080'\r"
        expect "Web Dashboard: http://10.123.42.225:8080"
        
        send "echo 'Google Cast: http://10.123.42.225:8008'\r"
        expect "Google Cast: http://10.123.42.225:8008"
        
        send "echo 'AirPlay: Available for iPhone/iPad casting'\r"
        expect "AirPlay: Available for iPhone/iPad casting"
        
        send "echo 'Custom GUI: Will start automatically on next boot'\r"
        expect "Custom GUI: Will start automatically on next boot"
        
        send "exit\r"
        expect eof
    }
    timeout {
        puts "Connection timed out"
        exit 1
    }
    eof {
        puts "Connection closed"
        exit 1
    }
}
