name: Build Complete Custom Raspberry Pi OS

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch: # Allow manual triggering

jobs:
    build-complete-os:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Full history for pi-gen

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y qemu-user-static binfmt-support

            - name: Clone pi-gen repository
              run: |
                  if [ ! -d "pi-gen" ]; then
                    git clone https://github.com/RPi-Distro/pi-gen.git
                  fi

            - name: Set up pi-gen configuration
              run: |
                  cd pi-gen
                  # Clean previous builds
                  rm -rf work deploy

                  # Create custom configuration
                  cat > config << 'EOF'
                  IMG_NAME='RaspberryPi3B-CustomOS-Complete'
                  RELEASE=bullseye
                  ENABLE_SSH=1
                  STAGE_LIST="stage0 stage1 stage2"
                  TARGET_HOSTNAME=raspberrypi-custom
                  FIRST_USER_NAME=pi
                  FIRST_USER_PASS=raspberry
                  DEPLOY_COMPRESSION=zip
                  EOF

            - name: Create comprehensive stage3 with all packages
              run: |
                  cd pi-gen

                  # Clean and create stage3
                  rm -rf stage3
                  mkdir -p stage3/00-install-packages
                  mkdir -p stage3/01-custom-scripts/files
                  mkdir -p stage3/02-python-packages
                  mkdir -p stage3/03-system-services/files
                  mkdir -p stage3/04-gui-setup
                  mkdir -p stage3/05-network-config

                  # Create comprehensive package list
                  cat > stage3/00-install-packages/00-packages << 'EOF'
                  # Core Python packages
                  python3
                  python3-pip
                  python3-tk
                  python3-psutil
                  python3-setuptools
                  python3-dev

                  # GUI and Desktop
                  xserver-xorg
                  xinit
                  lightdm
                  lxde-core
                  openbox
                  pcmanfm
                  lxterminal
                  lxpanel
                  lxappearance

                  # Audio and Media
                  shairport-sync
                  avahi-daemon
                  pulseaudio
                  alsa-utils

                  # Network and Services
                  samba
                  samba-common-bin
                  nginx
                  apache2-utils

                  # Development tools
                  git
                  curl
                  wget
                  vim
                  nano

                  # System utilities
                  htop
                  tree
                  unzip
                  zip
                  rsync

                  # Network tools
                  iw
                  wireless-tools
                  hostapd
                  dnsmasq
                  net-tools

                  # Additional useful packages
                  chromium-browser
                  firefox-esr
                  vlc
                  gparted
                  neofetch
                  EOF

                  # Create package installation script
                  cat > stage3/00-install-packages/00-run.sh << 'EOFPACKAGES'
                  #!/bin/bash -e

                  on_chroot << EOFCHROOT
                  # Update package lists
                  apt-get update

                  # Install all packages
                  apt-get install -y python3 python3-pip python3-tk python3-psutil python3-setuptools python3-dev
                  apt-get install -y xserver-xorg xinit lightdm lxde-core openbox pcmanfm lxterminal lxpanel lxappearance
                  apt-get install -y shairport-sync avahi-daemon pulseaudio alsa-utils
                  apt-get install -y samba samba-common-bin nginx apache2-utils
                  apt-get install -y git curl wget vim nano
                  apt-get install -y htop tree unzip zip rsync
                  apt-get install -y iw wireless-tools hostapd dnsmasq net-tools
                  apt-get install -y chromium-browser firefox-esr vlc gparted htop neofetch

                  # Clean up
                  apt-get autoremove -y
                  apt-get autoclean

                  echo "‚úÖ All packages installed successfully"
                  EOFCHROOT
                  EOFPACKAGES

                  chmod +x stage3/00-install-packages/00-run.sh

                  # Install Python packages
                  cat > stage3/02-python-packages/00-run.sh << 'EOFPYTHON'
                  #!/bin/bash -e

                  on_chroot << EOFCHROOT
                  # Install Python packages
                  pip3 install --upgrade pip
                  pip3 install flask flask-cors requests psutil
                  pip3 install pillow numpy matplotlib
                  pip3 install pyserial

                  echo "‚úÖ Python packages installed"
                  EOFCHROOT
                  EOFPYTHON

                  chmod +x stage3/02-python-packages/00-run.sh

                  # Copy custom applications from our project
                  cp ../overlays/usr/local/bin/raspberry-pi-gui.py stage3/01-custom-scripts/files/ 2>/dev/null || true

                  # Create web dashboard
                  cat > stage3/01-custom-scripts/files/remote-control-server.py << 'EOFWEB'
                  #!/usr/bin/env python3
                  from flask import Flask, jsonify, render_template_string
                  import psutil
                  import subprocess
                  import socket

                  app = Flask(__name__)

                  @app.route('/')
                  def dashboard():
                      return render_template_string('''
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>Raspberry Pi Dashboard</title>
                      <meta name="viewport" content="width=device-width, initial-scale=1">
                      <style>
                          body { font-family: Arial; background: #2c3e50; color: white; padding: 20px; margin: 0; }
                          .container { max-width: 1200px; margin: 0 auto; }
                          .card { background: #34495e; padding: 20px; margin: 10px; border-radius: 10px; display: inline-block; width: 300px; vertical-align: top; }
                          h1 { text-align: center; margin-bottom: 30px; }
                          .status { color: #27ae60; font-weight: bold; }
                          .error { color: #e74c3c; font-weight: bold; }
                          .warning { color: #f39c12; font-weight: bold; }
                          .progress-bar { background: #2c3e50; height: 20px; border-radius: 10px; overflow: hidden; margin: 5px 0; }
                          .progress-fill { height: 100%; background: linear-gradient(90deg, #27ae60, #2ecc71); transition: width 0.3s; }
                          .service-control { margin: 10px 0; }
                          .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; }
                          .btn-start { background: #27ae60; color: white; }
                          .btn-stop { background: #e74c3c; color: white; }
                          .btn-restart { background: #f39c12; color: white; }
                          .btn:hover { opacity: 0.8; }
                      </style>
                  </head>
                  <body>
                      <div class="container">
                          <h1>üçì Raspberry Pi Custom OS Dashboard</h1>
                          
                          <div class="card">
                              <h2>System Status</h2>
                              <p>CPU: <span id="cpu">Loading...</span></p>
                              <div class="progress-bar"><div class="progress-fill" id="cpu-bar"></div></div>
                              
                              <p>Memory: <span id="memory">Loading...</span></p>
                              <div class="progress-bar"><div class="progress-fill" id="memory-bar"></div></div>
                              
                              <p>Disk: <span id="disk">Loading...</span></p>
                              <div class="progress-bar"><div class="progress-fill" id="disk-bar"></div></div>
                              
                              <p>Temperature: <span id="temp">Loading...</span></p>
                          </div>
                          
                          <div class="card">
                              <h2>Services</h2>
                              <p>AirPlay: <span id="airplay">Checking...</span></p>
                              <p>Google Cast: <span id="cast">Checking...</span></p>
                              <p>Web Dashboard: <span id="web">Checking...</span></p>
                              <p>SSH: <span id="ssh">Checking...</span></p>
                              
                              <div class="service-control">
                                  <button class="btn btn-start" onclick="controlService('start')">Start All</button>
                                  <button class="btn btn-stop" onclick="controlService('stop')">Stop All</button>
                                  <button class="btn btn-restart" onclick="controlService('restart')">Restart All</button>
                              </div>
                          </div>
                          
                          <div class="card">
                              <h2>Network</h2>
                              <p>IP Address: <span id="ip">Loading...</span></p>
                              <p>WiFi: <span id="wifi">Loading...</span></p>
                              
                              <h3>Access URLs:</h3>
                              <p><a href="#" id="web-url" style="color: #3498db;">Web Dashboard</a></p>
                              <p><a href="#" id="cast-url" style="color: #3498db;">Google Cast</a></p>
                          </div>
                          
                          <div class="card">
                              <h2>Quick Actions</h2>
                              <button class="btn btn-start" onclick="window.open('/api/reboot', '_blank')">Reboot Pi</button>
                              <button class="btn btn-stop" onclick="window.open('/api/shutdown', '_blank')">Shutdown Pi</button>
                              <button class="btn btn-restart" onclick="location.reload()">Refresh Page</button>
                          </div>
                      </div>
                      
                      <script>
                          function updateProgressBar(elementId, value) {
                              const bar = document.getElementById(elementId + '-bar');
                              if (bar) {
                                  bar.style.width = value + '%';
                                  if (value > 80) bar.style.background = 'linear-gradient(90deg, #e74c3c, #c0392b)';
                                  else if (value > 60) bar.style.background = 'linear-gradient(90deg, #f39c12, #e67e22)';
                                  else bar.style.background = 'linear-gradient(90deg, #27ae60, #2ecc71)';
                              }
                          }
                          
                          function controlService(action) {
                              fetch(`/api/control/${action}`, {method: 'POST'})
                                  .then(() => setTimeout(updateStatus, 1000));
                          }
                          
                          function updateStatus() {
                              fetch('/api/status')
                                  .then(r => r.json())
                                  .then(d => {
                                      document.getElementById('cpu').textContent = d.cpu + '%';
                                      document.getElementById('memory').textContent = d.memory + '%';
                                      document.getElementById('disk').textContent = d.disk + '%';
                                      document.getElementById('temp').textContent = d.temp;
                                      
                                      document.getElementById('airplay').textContent = d.airplay;
                                      document.getElementById('cast').textContent = d.cast;
                                      document.getElementById('web').textContent = d.web;
                                      document.getElementById('ssh').textContent = d.ssh;
                                      
                                      document.getElementById('ip').textContent = d.ip;
                                      document.getElementById('wifi').textContent = d.wifi;
                                      
                                      document.getElementById('web-url').href = 'http://' + d.ip + ':8080';
                                      document.getElementById('cast-url').href = 'http://' + d.ip + ':8008';
                                      
                                      updateProgressBar('cpu', d.cpu);
                                      updateProgressBar('memory', d.memory);
                                      updateProgressBar('disk', d.disk);
                                  });
                          }
                          
                          setInterval(updateStatus, 2000);
                          updateStatus();
                      </script>
                  </body>
                  </html>
                  ''')

                  @app.route('/api/status')
                  def status():
                      try:
                          # Get system info
                          cpu = psutil.cpu_percent()
                          memory = psutil.virtual_memory()
                          disk = psutil.disk_usage('/')
                          
                          # Get temperature
                          try:
                              temp_result = subprocess.run(['vcgencmd', 'measure_temp'], capture_output=True, text=True)
                              temp = temp_result.stdout.strip().replace('temp=', '').replace("'C", '¬∞C')
                          except:
                              temp = 'N/A'
                          
                          # Check services
                          airplay_status = subprocess.run(['systemctl', 'is-active', 'airplay.service'], capture_output=True, text=True)
                          cast_status = subprocess.run(['systemctl', 'is-active', 'google-cast.service'], capture_output=True, text=True)
                          web_status = subprocess.run(['systemctl', 'is-active', 'remote-control.service'], capture_output=True, text=True)
                          ssh_status = subprocess.run(['systemctl', 'is-active', 'ssh'], capture_output=True, text=True)
                          
                          # Get IP address
                          try:
                              s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                              s.connect(("8.8.8.8", 80))
                              ip = s.getsockname()[0]
                              s.close()
                          except:
                              ip = 'Unknown'
                          
                          # Get WiFi info
                          try:
                              wifi_result = subprocess.run(['iwconfig', 'wlan0'], capture_output=True, text=True)
                              if 'ESSID:' in wifi_result.stdout:
                                  wifi = wifi_result.stdout.split('ESSID:')[1].split()[0].strip('"')
                              else:
                                  wifi = 'Not connected'
                          except:
                              wifi = 'Unknown'
                          
                          return jsonify({
                              'cpu': cpu,
                              'memory': memory.percent,
                              'disk': disk.percent,
                              'temp': temp,
                              'airplay': airplay_status.stdout.strip(),
                              'cast': cast_status.stdout.strip(),
                              'web': web_status.stdout.strip(),
                              'ssh': ssh_status.stdout.strip(),
                              'ip': ip,
                              'wifi': wifi
                          })
                      except Exception as e:
                          return jsonify({'error': str(e)})

                  @app.route('/api/control/<action>', methods=['POST'])
                  def control_services(action):
                      try:
                          if action == 'start':
                              subprocess.run(['sudo', 'systemctl', 'start', 'airplay.service'], check=False)
                              subprocess.run(['sudo', 'systemctl', 'start', 'google-cast.service'], check=False)
                              subprocess.run(['sudo', 'systemctl', 'start', 'remote-control.service'], check=False)
                          elif action == 'stop':
                              subprocess.run(['sudo', 'systemctl', 'stop', 'airplay.service'], check=False)
                              subprocess.run(['sudo', 'systemctl', 'stop', 'google-cast.service'], check=False)
                              subprocess.run(['sudo', 'systemctl', 'stop', 'remote-control.service'], check=False)
                          elif action == 'restart':
                              subprocess.run(['sudo', 'systemctl', 'restart', 'airplay.service'], check=False)
                              subprocess.run(['sudo', 'systemctl', 'restart', 'google-cast.service'], check=False)
                              subprocess.run(['sudo', 'systemctl', 'restart', 'remote-control.service'], check=False)
                          return jsonify({'status': 'success'})
                      except Exception as e:
                          return jsonify({'error': str(e)})

                  @app.route('/api/reboot')
                  def reboot():
                      subprocess.run(['sudo', 'reboot'], check=False)
                      return 'Rebooting...'

                  @app.route('/api/shutdown')
                  def shutdown():
                      subprocess.run(['sudo', 'shutdown', '-h', 'now'], check=False)
                      return 'Shutting down...'

                  if __name__ == '__main__':
                      app.run(host='0.0.0.0', port=8080, debug=False)
                  EOFWEB

                  # Create system services
                  cat > stage3/03-system-services/files/airplay.service << 'EOFAIRPLAY'
                  [Unit]
                  Description=AirPlay Receiver
                  After=network.target sound.target

                  [Service]
                  Type=simple
                  ExecStart=/usr/bin/shairport-sync
                  Restart=always
                  RestartSec=5
                  User=pi

                  [Install]
                  WantedBy=multi-user.target
                  EOFAIRPLAY

                  cat > stage3/03-system-services/files/google-cast.service << 'EOFCAST'
                  [Unit]
                  Description=Google Cast Receiver
                  After=network.target

                  [Service]
                  Type=simple
                  ExecStart=/usr/bin/python3 -m http.server 8008
                  WorkingDirectory=/home/pi
                  Restart=always
                  RestartSec=5
                  User=pi

                  [Install]
                  WantedBy=multi-user.target
                  EOFCAST

                  cat > stage3/03-system-services/files/remote-control.service << 'EOFREMOTE'
                  [Unit]
                  Description=Remote Control Web Server
                  After=network.target

                  [Service]
                  Type=simple
                  ExecStart=/usr/bin/python3 /usr/local/bin/remote-control-server.py
                  Restart=always
                  RestartSec=5
                  User=pi

                  [Install]
                  WantedBy=multi-user.target
                  EOFREMOTE

                  # Create service installation script
                  cat > stage3/03-system-services/00-run.sh << 'EOFSERVICES'
                  #!/bin/bash -e

                  on_chroot << EOFCHROOT
                  # Copy service files
                  cp /tmp/files/airplay.service /etc/systemd/system/
                  cp /tmp/files/google-cast.service /etc/systemd/system/
                  cp /tmp/files/remote-control.service /etc/systemd/system/

                  # Copy application files
                  cp /tmp/files/raspberry-pi-gui.py /usr/local/bin/
                  cp /tmp/files/remote-control-server.py /usr/local/bin/
                  chmod +x /usr/local/bin/raspberry-pi-gui.py
                  chmod +x /usr/local/bin/remote-control-server.py

                  # Enable services
                  systemctl daemon-reload
                  systemctl enable airplay.service
                  systemctl enable google-cast.service
                  systemctl enable remote-control.service

                  # Start services
                  systemctl start airplay.service
                  systemctl start google-cast.service
                  systemctl start remote-control.service

                  echo "‚úÖ Services installed and started"
                  EOFCHROOT
                  EOFSERVICES

                  chmod +x stage3/03-system-services/00-run.sh

                  # Create GUI setup
                  cat > stage3/04-gui-setup/00-run.sh << 'EOFGUI'
                  #!/bin/bash -e

                  on_chroot << EOFCHROOT
                  # Create autostart directory
                  mkdir -p /home/pi/.config/autostart

                  # Create autostart entry
                  cat > /home/pi/.config/autostart/custom-gui.desktop << 'AUTOSTART'
                  [Desktop Entry]
                  Type=Application
                  Name=Custom GUI
                  Exec=python3 /usr/local/bin/raspberry-pi-gui.py
                  Hidden=false
                  NoDisplay=false
                  X-GNOME-Autostart-enabled=true
                  AUTOSTART

                  # Set ownership
                  chown -R 1000:1000 /home/pi/.config

                  # Configure LightDM for auto-login
                  sed -i 's/#autologin-user=/autologin-user=pi/' /etc/lightdm/lightdm.conf
                  sed -i 's/#autologin-user-timeout=0/autologin-user-timeout=0/' /etc/lightdm/lightdm.conf

                  # Enable desktop
                  systemctl set-default graphical.target
                  systemctl enable lightdm

                  echo "‚úÖ GUI setup complete"
                  EOFCHROOT
                  EOFGUI

                  chmod +x stage3/04-gui-setup/00-run.sh

                  # Create network configuration
                  cat > stage3/05-network-config/00-run.sh << 'EOFNETWORK'
                  #!/bin/bash -e

                  on_chroot << EOFCHROOT
                  # Enable SSH with password authentication
                  sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
                  sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

                  # Configure Samba
                  cat >> /etc/samba/smb.conf << 'SAMBA'

                  [pi]
                     path = /home/pi
                     browseable = yes
                     read only = no
                     guest ok = no
                     valid users = pi
                  SAMBA

                  # Set Samba password
                  (echo "raspberry"; echo "raspberry") | smbpasswd -a pi -s

                  # Configure WiFi (if credentials provided)
                  if [ -f /boot/wpa_supplicant.conf ]; then
                      cp /boot/wpa_supplicant.conf /etc/wpa_supplicant/
                  fi

                  echo "‚úÖ Network configuration complete"
                  EOFCHROOT
                  EOFNETWORK

                  chmod +x stage3/05-network-config/00-run.sh

                  # Create export marker
                  touch stage3/EXPORT_IMAGE

            - name: Build complete OS image with Docker
              run: |
                  cd pi-gen
                  chmod +x build-docker.sh
                  chmod +x build.sh
                  ./build.sh

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: complete-raspberry-pi-os
                  path: |
                      pi-gen/deploy/*.img
                      pi-gen/deploy/*.zip
                  retention-days: 30

            - name: Create release (on main branch push)
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      pi-gen/deploy/*.img
                      pi-gen/deploy/*.zip
                  tag_name: v${{ github.run_number }}
                  name: Complete Raspberry Pi OS v${{ github.run_number }}
                  body: |
                      üçì **Complete Raspberry Pi 3B OS - Everything Pre-installed**

                      This release contains a complete custom Raspberry Pi OS image with ALL packages and features pre-installed:

                      ‚úÖ **All Packages Pre-installed** - No waiting for installations
                      ‚úÖ **Python Libraries Ready** - Flask, psutil, numpy, matplotlib
                      ‚úÖ **Custom GUI Application** - Professional interface with service controls
                      ‚úÖ **Web Dashboard** - Real-time monitoring with progress bars
                      ‚úÖ **AirPlay Receiver** - Cast from iPhone/iPad
                      ‚úÖ **Google Cast** - Cast from Android/Chrome
                      ‚úÖ **SSH with Password** - Easy remote access
                      ‚úÖ **Samba File Sharing** - Network file access
                      ‚úÖ **Auto-login & Auto-start** - Everything starts automatically
                      ‚úÖ **Network Configuration** - WiFi and services ready

                      **Installation:**
                      1. Download the `.img` file
                      2. Flash to USB drive (8GB+ recommended)
                      3. Insert into Raspberry Pi 3B
                      4. Power on - everything works immediately!

                      **No more waiting for installations - everything is ready to use!**
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
